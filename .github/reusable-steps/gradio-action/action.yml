name: Run Gradio or Test script

inputs:
  script:
    required: true
  project:
    required: true
  timeout:
    required: false
    default: 3600

runs:
  using: 'composite'
  steps:
    - name: Run Script (Linux/Mac)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        cd ${{ inputs.project }}
        echo "==> Starting script: ${{ inputs.script }}"

        if [[ "${{ inputs.script }}" == *"test.py" ]]; then
          echo "==> Detected test script. Running in foreground and letting it manage its own lifecycle."
          python ${{ inputs.script }} 2>&1 | tee gradio_log.txt
        else
          echo "==> Detected long-running app. Starting in background and waiting for readiness."

          if [ "${{ runner.os }}" == "Linux" ]; then
            xvfb-run python ${{ inputs.script }} 2>&1 | tee gradio_log.txt &
          else
            python ${{ inputs.script }} 2>&1 | tee gradio_log.txt &
          fi

          app_pid=$(ps aux | grep -i '[p]ython ${{ inputs.script }}' | awk '{print $2}')
          echo "==> App PID: $app_pid"

          echo "==> Waiting for readiness log ('Demo is ready!') up to ${{ inputs.timeout }} seconds..."
          timeout ${{ inputs.timeout }} bash -c "
            (tail -f gradio_log.txt &) | awk '/Demo is ready!/ { exit }'
          "

          status=$?

          echo "==> Readiness check completed with status: $status"
          echo "==> Stopping background app..."
          pkill -P $app_pid || echo "No child processes to kill."
          kill $app_pid || echo "App process already terminated."
          wait $app_pid || echo "App process cleanup complete."

          exit $status
        fi

    - name: Run Script (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: powershell
      run: |
        cd ${{ inputs.project }}
        Write-Output "==> Starting script: ${{ inputs.script }}"

        if (${{ inputs.script }} -like "*test.py") {
          Write-Output "==> Detected test script. Running directly."
          python ${{ inputs.script }} *> gradio_log.txt
        } else {
          Write-Output "==> Detected long-running app. Starting in background and monitoring."

          $proc = Start-Process -NoNewWindow -FilePath "python" -ArgumentList "${{ inputs.script }}" -RedirectStandardOutput gradio_stdout.txt -RedirectStandardError gradio_stderr.txt -PassThru
          $app_pid = $proc.Id
          Write-Output "==> App PID: $app_pid"

          $start_time = Get-Date
          $timeout = ${{ inputs.timeout }}
          while ($true) {
            $content = Get-Content -Path gradio_stdout.txt, gradio_stderr.txt -Raw
            if ($content -match "Demo is ready!") { break }
            if (((Get-Date) - $start_time).TotalSeconds -ge $timeout) {
              Write-Output "==> Timeout waiting for readiness."
              exit 1
            }
            Start-Sleep -Seconds 2
          }

          Write-Output "==> Readiness check completed. Stopping process..."
          Stop-Process -Id $app_pid -Force -ErrorAction SilentlyContinue
          exit 0
        }